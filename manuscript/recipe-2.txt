# Recipe 2 - Scaffolding a new, Node Project

In this recipe, we will create a schematic that will generate a new Node project. This will be a simple little project that will save our time by allowing us to easily generate a small Node server. We will call this schematic `node-api`. When we are done, we should be able to run this schematic and have a ready-to-use Node server complete with Express, server hot-reloading for development, and a simple REST implementation.

---

## Getting Started

Make sure that you are in the current directory of our `cookbook` schematics collection. If you haven't created your schematics collection yet, please see the preceding recipe's "Our Schematic Collection" section.

First things first, let's generate a blank schematic using the name `node-api`. We can do this by running the following command within the `cookbook` directory:

`schematics blank --name=node-api`

This command will generate a new schematics collection if it is not currently located within an existing collection. Since we ran this command within an existing collection, it simply generated a new, blank schematic for us and updated our `collection.json` accordingly. Pretty nifty, huh?

Next, let's add in some additional boilerplate:

1. `cd` into `cookbook/src/node-api`
2. Create a template directory named `files`
3. Create a `schema.d.ts` file
4. Create a `schema.json` file

With these new files created, let's update our new schematic's reference inside of our schematic collection's `collection.json`.

1. `cd` into `cookbook/src`
2. Update our `node-api` schematic's reference in the `collection.json` by changing it to the following:

    ```javascript
      "node-api": {
        "description": "Generates a new Node API.",
        "factory": "./node-api/index#nodeApi",
        "alias": "api"
      }
    ```
    Here we have simply changed our schematic's description and given our schematic an alias so that we can reference it by the name `api` instead of `node-api`.

## Schema Creation

In this section we will create the schema for this recipe's schematic. Since the purpose of this schematic is simply to generate some boilerplate we will make its schema fairly simple. We will users of this schematic to be able to give the Node API it generates a name while also being able to specify the directory in which it should be generated.

Here's what our `schema.json` should look like in order for it to satisfy the above requirements:

```javascript
    {
        "$schema": "http://json-schema.org/schema",
        "id": "NodeApi",
        "title": "Node API",
        "type": "object",
        "properties": {
        "name": {
            "type": "string",
            "description": "The name of the generated Node API",
            "$default": {
            "$source": "argv",
            "index": 0
            }
        },
        "directory": {
            "description": "The directory in which to generate the Node API.",
            "type": "string",
            "default": false,
            "alias": "dir"
        }
        },
        "required": [
        "name"
        ]
  }
```

And here is what our `schema.d.ts` TypeScript declaration file should look like: 

```javascript
    export interface Schema {
        name: string;
        directory?: string;
    }
```

With these two schema files implemented we can be assured that any arguments we pass in to our schematic will be validated properly.

## Writing Unit Tests

It's time to write some unit tests!

-- write unit test that checks that all files are available
-- write unit test that makes sure that files with the name templated include the correct name
-- write unit test that makes sure that files are outputted to the correct dir when directory arg given

## Creating Our File Templates

- add in template files to files dir
- template the necessary files (name) correctly

### Implementing the "RuleFactory"

-- create template source from `files` dir
-- move template source to new directory using `name` arg unless `directory` arg given
-- run NPM package install task on new project

Let's see if our tests our passing... First change directory into the root directory of our schematics collection and then run:

`npm test`

You should see all tests passing for our new schematic!


### Step Five - Functionally Testing Our Schematic

-- npm link it globally and then run the schematic
-- make sure that all files look good
-- run the node server 
-- test that all api endpoints are configured correctly

## Conclusion

Good job! With the completion of this second recipe, you now have a working example of how you can use Angluar Schematics to template our a custom Node project. This template could easily be expanded to encompass other languages/environments. For instance, instead of a new Node API, you could have this schematic generate boilerplate for a new Scala or Go project. The possibilities are endless!