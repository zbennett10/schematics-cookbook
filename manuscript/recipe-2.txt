# Recipe 2 - Scaffolding a new, Node Project

In this recipe, we will create a schematic that will generate a new Node project. We will call this schematic `node-api`. The goal of this schematic will be to save us some time creating an API by generating boilerplate code/configuration for us. We should be able to run our schematic and immediately have a ready-to-use Node server complete with Express, routing, and a basic API.

---

### Getting Started

-- start off in cookbook directoy from previous recipe
-- add in new schematic including:
    - add schematic dir
    - add schematic `/files` dir
    - add schema.d.ts file
    - add schema.json file
    - add in template files to files dir
    - add schematic to collection.json



## `node-api` Implementation

With our preparation taken care of, it's time to implement the core logic of our schematic. We want our new schematic to augment Angular's existing `component` schematic through which users of the Angular CLI can scaffold out new Angular components through the command `ng generate component`. To make this happen, we will we will need to complete two tasks. Firstly, we need to call the external, `component` schematic that Angular provides. Secondly, we need to chain this schematic with our own functionality that augments the existing `component` schematic by adding an optional flag which will allow for a side-car service to be created alongside this component. When this flag is specified, our schematic will create a `<component-name>.service.ts` file alongside the `<component-name>.component.ts` file previously created by the external, `component` schematic.

### Step One - Schema Creation

### Step Two - Writing Unit Tests

It's time to write some unit tests!

### Step Three - Implementing our Schematic's RuleFactory

Let's see if our tests our passing... First change directory into the root directory of our schematics collection and then run:

`npm test`

You should see all tests passing for our new schematic!


### Step Four - Functionally Testing Our Schematic

-- npm link it globally and then run the schematic
-- make sure that all files look good
-- run the node server 
-- test that all api endpoints are configured correctly

## Conclusion 
