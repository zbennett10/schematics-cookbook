# Recipe 2 - Scaffolding a new, Node Project

In this recipe, we will create a schematic that will generate a new Node project. This will be a simple little project that will save our time by allowing us to easily generate a small Node server. We will call this schematic `node-api`. When we are done, we should be able to run this schematic and have a ready-to-use Node server complete with Express, server hot-reloading for development, and a simple REST implementation.

---

## Getting Started

Make sure that you are in the current directory of our `cookbook` schematics collection. If you haven't created your schematics collection yet, please see the preceding recipe's "Our Schematic Collection" section.

First things first, let's generate a blank schematic using the name `node-api`. We can do this by running the following command within the `cookbook` directory:

`schematics blank --name=node-api`

This command will generate a new schematics collection if it is not currently located within an existing collection. Since we ran this command within an existing collection, it simply generated a new, blank schematic for us and updated our `collection.json` accordingly. Pretty nifty, huh?

Next, let's add in some additional boilerplate:

1. `cd` into `cookbook/src/node-api`
2. Create a template directory named `files`
3. Create a `schema.d.ts` file
4. Create a `schema.json` file

With these new files created, let's update our new schematic's reference inside of our schematic collection's `collection.json`.

1. `cd` into `cookbook/src`
2. Update our `node-api` schematic's reference in the `collection.json` by changing it to the following:

    ```javascript
      "node-api": {
        "aliases": [ "api" ],
        "description": "Generates a new Node API.",
        "factory": "./node-api/index#nodeApi"
      }
    ```
    Here we have simply changed our schematic's description and given our schematic an alias so that we can reference it by the name `api` instead of `node-api`.

## Schema Creation

In this section we will create the schema for this recipe's schematic. Since the purpose of this schematic is simply to generate some boilerplate we will make its schema fairly simple. We will users of this schematic to be able to give the Node API it generates a name while also being able to specify the directory in which it should be generated.

Here's what our `schema.json` should look like in order for it to satisfy the above requirements:

```javascript
    {
        "$schema": "http://json-schema.org/schema",
        "id": "NodeApi",
        "title": "Node API",
        "type": "object",
        "properties": {
        "name": {
            "type": "string",
            "description": "The name of the generated Node API",
            "$default": {
            "$source": "argv",
            "index": 0
            }
        },
        "directory": {
            "description": "The directory in which to generate the Node API.",
            "type": "string",
            "default": false,
            "alias": "dir"
        }
        },
        "required": [
        "name"
        ]
  }
```

And here is what our `schema.d.ts` TypeScript declaration file should look like: 

```javascript
    export interface Schema {
        name: string;
        directory?: string;
    }
```

With these two schema files implemented we can be assured that any arguments we pass in to our schematic will be validated properly.

## Writing Unit Tests

It's time to write some unit tests!

The goal in this section will be to write some unit tests which make four different assertions about the capabilities of our schematic. These assertions include:

1. Our schematic creates the necessary Node API boilerplate.
2. Our schematic is available via the "api" schematic alias.
3. Our schematic templates boilerplate files with the correct name.
4. Our schematic generates our Node API at the specified directory when a directory is designated.

Building upon the unit tests that we wrote in our first recipe, here's what we want our unit tests to look like for this schematic:

```javascript
import { SchematicsException } from '@angular-devkit/schematics';
import { SchematicTestRunner } from '@angular-devkit/schematics/testing';
import * as path from 'path';

const collectionPath = path.join(__dirname, '../collection.json');

describe('node-api', () => {
  it('creates the necessary Node API boilerplate', () => {
    const runner = new SchematicTestRunner('cookbook', collectionPath),
            tree = runner.runSchematic('node-api', { name: 'test-app' }),
       { files } = tree;

    expect(files.length).toBe(9);
  });

  it('runs successfully via the "api" alias', () => {
    const runner = new SchematicTestRunner('cookbook', collectionPath),
            tree = runner.runSchematic('api', { name: 'test-app' }),
       { files } = tree;

    expect(files.length).toBe(9);
  });

  it('templates boilerplate files with the correct name', () => {
    const name   = 'test-app',
          runner = new SchematicTestRunner('cookbook', collectionPath),
            tree = runner.runSchematic('api', { name }),
       filePaths = [
          `/${name}/package.json`,
          `/${name}/README.md`
        ];

    expect(filePaths.every(path => {
      const fileContents: Buffer | null = tree.read(path);
      if(!fileContents) throw new SchematicsException(`Unable to read ${fileContents} at path: ${path}`);
      return fileContents.toString('utf-8').includes('test-app');
    })).toBe(true);
  });

  it('creates boilerplate at the correct directory when specified', () => {
    const name   = 'test-app',
       directory = '/test/dir',
          runner = new SchematicTestRunner('cookbook', collectionPath),
            tree = runner.runSchematic('api', { name, directory }),
       { files } = tree,
       filePaths = [
          `${directory}/${name}/package.json`,
          `${directory}/${name}/README.md`,
          `${directory}/${name}/src/server.ts`,
          `${directory}/${name}/src/routes.ts`,
          `${directory}/${name}/src/index.types.ts`,
          `${directory}/${name}/src/mock/books.json`,
        ];

    expect(filePaths.every(path => files.includes(path))).toBe(true);
  });
});
```

It's pretty simple right? In the above `index_spec.ts` file we are making the above four assertions using four different unit tests. In each one of these unit tests, we are using an instance of the Angular-provided `SchematicTestRunner` class to run our `node-api` schematic. As you can see there is some code that is repeated at the beginning of each one of these unit tests. Concerning this, I'll leave an exercise here for you, the reader, to simplify these unit tests by using the `beforeEach` hook which the `Jasmine` testing framework provides.

## Creating Our File Templates

With our unit tests written, let's lay down the final piece of preparation before we start implementing our schematic's RuleFactory! In a previous section, we created the customary `files` directory which is meant to house any file templates which our schematic will process. In this section we are going to add our templates into this directory by using the following steps:

1. Travel to the [GitHub repo](https://github.com/zbennett10/schematics-recipe-2-node-api) for these files.
2. Click on the `Clone or download` button on the right side of the page.
3. Click the `Download ZIP` button.
4. Unzip the contents of the downloaded folder into our schematic's `files` directory.

When all is said and done, your `files` directory should look like this:

`/files/`
    `/src/`
        `/mock/`
            `books.json`
        `index.types.ts`
        `routes.ts`
        `server.ts`
    `nodemon.json`
    `package.json`
    `README.md`
    `tsconfig.json`
    `tslint.json`

### Implementing the "RuleFactory"

With our templates ready, it's finally time to write the core logic of our schematic!

Let's jump in to the code!

```javascript
import { strings } from '@angular-devkit/core';
import {
  Rule,
  SchematicContext,
  Tree,
  apply,
  url,
  template,
  move,
  chain,
  mergeWith
} from '@angular-devkit/schematics';
import { NodePackageInstallTask } from '@angular-devkit/schematics/tasks';
import { Schema as NodeApiSchematicOptions } from './schema';

export function nodeApi(options: NodeApiSchematicOptions): Rule {
    const templateDirectory = `${options.directory ? options.directory : ''}/${options.name}`;
    const templateSource = apply(
      url('./files'), [
        template({
          ...strings,
          'if-flat': (s: string) => s,
          ...options,
        }),
        move(templateDirectory)
      ]
    );

    return chain([
      mergeWith(templateSource),
      installNodeDependencies(templateDirectory)
    ]);
}

function installNodeDependencies(workingDirectory: string): Rule {
  return (tree: Tree, context: SchematicContext) => {
    const packageInstallOptions = { workingDirectory };
    context.addTask(new NodePackageInstallTask(packageInstallOptions));

    return tree;
  }
}
```

TODO: discuss whats happening here!

Let's see if our tests our passing... First change directory into the root directory of our schematics collection and then run:

`npm test`

You should see all tests passing for our new schematic!


### Step Five - Functionally Testing Our Schematic

-- npm link it globally and then run the schematic
-- make sure that all files look good
-- run the node server 
-- test that all api endpoints are configured correctly

## Conclusion

Good job! With the completion of this second recipe, you now have a working example of how you can use Angluar Schematics to template our a custom Node project. This template could easily be expanded to encompass other languages/environments. For instance, instead of a new Node API, you could have this schematic generate boilerplate for a new Scala or Go project. The possibilities are endless!