# Recipe 2 - Scaffolding a new, Node Project

In this recipe, we will create a schematic that will generate a new Node project. This will be a simple little project that will save our time by allowing us to easily generate a small Node server. We will call this schematic `node-api`. When we are done, we should be able to run this schematic and have a ready-to-use Node server complete with Express, server hot-reloading for development, and a simple REST implementation.

---

## Getting Started

Make sure that you are in the current directory of our `cookbook` schematics collection. If you haven't created your schematics collection yet, please see the preceding recipe's "Our Schematic Collection" section.

First things first, let's generate a blank schematic using the name `node-api`. We can do this by running the following command within the `cookbook` directory:

`schematics blank --name=node-api`

This command will generate a new schematics collection if it is not currently located within an existing collection. Since we ran this command within an existing collection, it simply generated a new, blank schematic for us and updated our `collection.json` accordingly. Pretty nifty, huh?

Next, let's add in some additional boilerplate:

1. `cd` into `cookbook/src/node-api`
2. Create a template directory named `files`
3. Create a `schema.d.ts` file
4. Create a `schema.json` file

With these new files created, let's update our new schematic's reference inside of our schematic collection's `collection.json`.

1. `cd` into `cookbook/src`
2. Update our `node-api` schematic's reference in the `collection.json` by changing it to the following:

    ```javascript
      "node-api": {
        "description": "Generates a new Node API.",
        "factory": "./node-api/index#nodeApi",
        "alias": "api"
      }
    ```
    Here we have simply changed our schematic's description and given our schematic an alias so that we can reference it by the name `api` instead of `node-api`.

## Schematic Implementation

With our preparation taken care of, it's time to implement the core logic of our schematic. We want our new schematic to augment Angular's existing `component` schematic through which users of the Angular CLI can scaffold out new Angular components through the command `ng generate component`. To make this happen, we will we will need to complete two tasks. Firstly, we need to call the external, `component` schematic that Angular provides. Secondly, we need to chain this schematic with our own functionality that augments the existing `component` schematic by adding an optional flag which will allow for a side-car service to be created alongside this component. When this flag is specified, our schematic will create a `<component-name>.service.ts` file alongside the `<component-name>.component.ts` file previously created by the external, `component` schematic.

### Step One - Schema Creation

### Step Two - Writing Unit Tests

It's time to write some unit tests!

### Step Three - Adding Templates
    - add in template files to files dir

### Step Four - Implementing our Schematic's RuleFactory

Let's see if our tests our passing... First change directory into the root directory of our schematics collection and then run:

`npm test`

You should see all tests passing for our new schematic!


### Step Five - Functionally Testing Our Schematic

-- npm link it globally and then run the schematic
-- make sure that all files look good
-- run the node server 
-- test that all api endpoints are configured correctly

## Conclusion
