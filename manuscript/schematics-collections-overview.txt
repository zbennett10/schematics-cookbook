# Schematics Collections

There are no tricks here - the title is self-explanatory. Schematics Collections, simply put, are collections of schematics.

A schematics collection is the means through which Angular's Schematics CLI references individual schematics.

An example use of the Schematics CLI:

`schematics collection_name:schematics_name --args --go --here`

As you can see here, the Schematics CLI is used by passing in a schematics collection name followed by an individual schematic name (or alias as we will see later on). Any additional arguments will be passed into the schematic itself.

A schematic collection's structure might look like the following:

```bash
/my-schematics-collection
    /src
        /schematic-one
        /schematic-two
    collection.json
    package.json
```

As you can see, the structure is quite simple. First we have our `/src` directory which contains our individual schematic directories. It is in these directories that we will keep our schematic code and templating files (more on this later). 

Next, there is the *`collection.json`* file. This file will contain metadata which will be used to describe the schematics which are found inside of our schematics collection.

Lastly, we find the standard *`package.json`* through which we can pull down any Node dependencies our project requires and perform various other administrative tasks that are beyond the scope of this book. Please see [NPM's documentation](https://docs.npmjs.com/files/package.json)<sup>1</sup> regarding the *`package.json`*.


[1]: https://docs.npmjs.com/files/package.json

## Schematic Collection Metadata

Collections are defined by their `collection.json` file. See our example `collection.json` file below.

```json
{
  "$schema": "../node_modules/@angular-devkit/schematics/collection-schema.json",
  "schematics": {
    "schematic-one": {
      "description": "A schematic description.",
      "factory": "./schematic-one/index#schematicOne"
    },
    "schematic-two": {
      "description": "Another schematic description.",
      "factory": "./schematic-two/index#schematicTwo"
    }
  }
}
```

Now lets dissect the above. The `$schema` field is completely optional. It's sole purpose is to point to the schema for this particular JSON document which, in our case, is Angular's schematic collection schema.

The `schematics` field denotes our individual schematics - all of whom's names comprise individual fields themselves within the `schematics` field's value (an object).

Each of the individual schematics themselves, in this example, are solely comprised of an object with `description` and `factory` fields. The `description` field is self-explanatory. The `factory` field here denotes a path to it's schematic's generator function (more on generator functions later). Of special note here is the `index#schematicOne` reference. This tells the Schematics library to reference the `schematicOne` generator function that is exported from the `index` file within the `schematic-one` schematic.

Now let's look at another, more advanced, example.
```json
{
  "$schema": "../node_modules/@angular-devkit/schematics/collection-schema.json",
  "schematics": {
    "schematic-one": {
      "aliases": ["one"],
      "description": "A schematic description.",
      "factory": "./schematic-one/index#schematicOne",
      "schema": "./schematic-one/schema.json"
    },
    "schematic-two": {
      "description": "Another schematic description.",
      "factory": "./schematic-two/index#schematicTwo",
      "schema": "./schematic-two/schema.json",
      "hidden": true
    }
  }
}
```
Here we introduce three new fields: `aliases`, `schema`, and `hidden`.

The `aliases` field is an array of aliases which can be used when referencing this schematic. Using the above example, running `schematic-one` via the Schematics CLI would look something like this:
`schematics my-schematics-collection:one --flags-here`

Notice the reference to `one`. It's the `aliases` field in our `collection.json` file which makes this alias available to us through the CLI.

TODO: Unveil hidden and schema fields usage.