# The Tree

The `Tree` is the first type we will look at within the Schematics library and is the starting point for all schematics. The `Tree`, simply put, is an abstraction of a filesystem. `Trees` are like a virtual, in-memory snapshot of a filesystem taken at a given point within the running of a schematic's `RuleFactory`. In the following chapters we will look at other types like the `Rule`, the `Source` and the `Action`. `Trees` are created, passed around, and transformed by many of these other types. `Trees` are a great abstraction through which we can eventually, safely, and atomically apply changes to the *actual* filesystem.

`Trees` can start their life off either empty or already containing a set of files. Schematics, when modifying a `Tree`, never directly modify the filesystem. Instead, modifications are applied to the `Tree`'s staging area and the `Tree` keeps track of the metadata that is associated with these changes.

The Schematics library provides many different methods on the `Tree` type so that working with them is a breeze. Some of the good ones to know about are included below!

## Direct Modifications

There are four different methods which directly modify a Tree. These methods include:

---

`tree.create(path: string, content: Buffer | string): void`

This method creates a file at a given path containing the given content.

---

`tree.delete(path: string): void`

This method deletes a file at a given path.

---

`tree.rename(from: string, to: string): void`

This method renames a file in the tree.

---

`tree.overwrite(path: string, content: Buffer | string): void`

This method overwrites a file at a given path.

---

## Primary Helpers

`Trees` also provide a few, primary helper methods. These are very powerfuly methods that are available to developers when working with a `Tree`. These include:

---

`tree.branch(): Tree`

This method creates a copy of the current `Tree`.

---

`tree.merge(other: Tree, strategy?: MergeStrategy): void`

This method merges two `Trees` using an optional `MergeStrategy`.

**NOTE: Schematics provides the following types of `MergeStrategies`:**

- Default: Overwrites are not allowed (The safest!)
- Error: This strategy errors out if two files have identical paths
- ContentOnly: Only overwrite file contents
- Overwrite: Allow overwrite, creation and deletion conflicts
- AllowOverwriteConflict: Only allow overwrite conflicts
- AllowCreationConflict: Only allow creation conflicts
- AllowDeleteConflict: Only allow deletion conflicts

---

`tree.apply(action: Action, strategy?: MergeStrategy): void`

This method applies a given `Action` to the `Tree` using an optional `MergeStrategy`.
There is more on what an `Action` is in the *"The Action and the Sink"* section.

---

## Secondary Helpers

The following methods are other helpers which you may find of use when using `Trees` in your schematics.

---

`tree.exists(path: string): boolean`

This method determines whether a given directory/file exists at a given path.

---

`tree.get(path: string): FileEntry | null`

This method fetches a `FileEntry` from a given `Tree` if it exists.

---

`tree.getDir(path: string): DirEntry`

This method fetches a `DirEntry` from a given tree.

---
