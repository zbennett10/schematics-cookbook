# Recipe 1 - Altering Angular's Component Schematic

In this recipe, we will create a schematic that adds functionality to Angular CLI's `ng generate component` command. Under the hood, Angular CLI's `ng generate component` command uses a Angular schematic named `component`. To view this schematic's source code, visit [here](https://github.com/angular/angular-cli/tree/master/packages/schematics/angular/component).

To complete this recipe, you will need to have the Angular CLI installed on your host machine. To install Angular CLI globally on your machine, run the following command:

`npm install -g @angular/cli`

---

### Our Schematic Collection

Next, we are going to create the schematic collection that will house each one of our recipes. We will call it the `cookbook`.

In a directory of our choosing we will run the following command:

`schematics blank --name=cookbook`

That command scaffolded the Angular schematic collection which we will use to house all of our 'recipe' schematics.

We will need to update a couple of these dependencies. Run the following commands in order to update these two packages:

```bash
cd cookbook

npm install --save @angular-devkit/core@latest

npm install --save @angular-devkit/schematics@latest
```

There is only one, further dependency which we will need in order to implement our recipes. The package `@schematics/angular` will enable us to use some of Angular's own schematics. These are schematics which the Angular CLI uses in order to scaffold out code. We need this package in our own schematics collection in order to use some of Angular's own schematics including it's `component` and `ng-new` schematics.

In order to install this NPM package run the following command in the root directory of our schematics collection:

`npm install --save @schematics/angular@latest`

### Creating Our First Recipe

First things first, we need to change the name of the `cookbook` schematic which was auto-generated inside of our `cookbook` schematic collection when we first created it. 

First off, we need to change this default schematic's metadata located inside of `cookbook/src/collection.json`.

We are going to change this schematic's name from `cookbook` to `cookbook-component`. Let's start by altering the `collection.json`. Here is an example of what our `collection.json` will look like after these alterations:

```json
{
    "$schema": "../node_modules/@angular-devkit/schematics/collection-schema.json",
    "schematics": {
        "cookbook-component": {
        "description": "Generates a cookbook Angular component",
        "factory": "./cookbook-component/index#cookbookComponent"
        }
    }
}
```

Next, let's go ahead and rename our `cookbook-component` schematic directory from `cookbook/src/cookbook` to `cookbook/src/cookbook-component`. You can do this by running the following command from the `cookbook/src` directory: 

`mv cookbook cookbook-component`

After this, we need to make some changes to our schematic's RuleFactory located in `cookbook/src/cookbook-component/index.ts`. All that we will need to change is the name of our RuleFactory. Here is an example of what our schematic's RuleFactory will look like after these changes:

```javascript
import { Rule, SchematicContext, Tree } from '@angular-devkit/schematics';


// You don't have to export the function as default. You can also have more than one rule factory
// per file.
export function cookbookComponent(_options: any): Rule {
    return (tree: Tree, _context: SchematicContext) => {
        return tree;
    };
}
```

Next, we need to change our `cookbook-component` schematic's test file located at `cookbook/src/cookbook-component/index_spec.ts`. Here is what we want it to look like:

```javascript
import { Tree } from '@angular-devkit/schematics';
import { SchematicTestRunner } from '@angular-devkit/schematics/testing';
import * as path from 'path';


const collectionPath = path.join(__dirname, '../collection.json');


describe('cookbook-component schematic', () => {
  it('works', () => {
    const runner = new SchematicTestRunner('schematics', collectionPath);
    const tree = runner.runSchematic('cookbook-component', {}, Tree.empty());

    expect(tree.files).toEqual([]);
  });
});
```

Next we need to prepare our template directory structure. We will do this by creating a directory named `files` in our schematic's directory. We need to create this directory at the following path: `cookbook/src/cookbook-component/files`.
This directory will house the templates for files that our schematic will create when invoked. For this schematic we will be creating just one template with the filename `__name@dasherize__.service.ts`. After we create this file we will need to make it look like this:

```javascript
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class <%= classify(name) %>Service {

  constructor() { }
}
```


Lastly, we need to create our schematic's schema file. We will create the file at the following path: `cookbook/src/cookbook-component/schema.json`.


## Cookbook-Component Implementation

With our preparation taken care of, it's time to implement the core logic of our schematic. We want our new schematic to augment Angular's existing `component` schematic through which users of the Angular CLI can scaffold out new Angular components through the command `ng generate component`. To make this happen, we will we will need to complete two tasks. Firstly, we need to call the external, `component` schematic that Angular provides. Secondly, we need to chain this schematic with our own functionality that augments the existing `component` schematic by adding an optional flag which will allow for a side-car service to be created alongside this component. When this flag is specified, our schematic will create a `<component-name>.service.ts` file alongside the `<component-name>.component.ts` file previously created by the external, `component` schematic.

### Step One - Schema Creation

The first part of creating our cookbook component schematic will be to create a schema for our schematic. For more information on schemas - please see the "Schematic Metadata and Validation" section of the "Schematics Overview" page earlier in this book.

We will want our `cookbook-component` schematic to take in a required `name` argument and an optional `service` argument. Here's what we want this schematic's `schema.json` to look like:

```json
{
  "$schema": "http://json-schema.org/schema",
  "id": "CookbookComponent",
  "title": "Cookbook Component",
  "type": "object",
  "properties": {
    "name": {
      "type": "string",
      "description": "Component name",
      "$default": {
        "$source": "argv",
        "index": 0
      }
    },
    "service": {
      "description": "Does this component need a side-car service?",
      "type": "boolean",
      "default": false,
      "alias": "s"
    }
  },
  "required": [
    "name"
  ]
}
```

With our `schema.json` file successfully created, let's create its functional counterpart - the `schema.d.ts` file. This TypeScript-centric file's (It is aptly-named a declaration file - hence the `.d.`) sole purpose is to provide a usable TypeScript type definition that we can use within a Schematic's RuleFactory. This will give us some added type safety within our RuleFactory's code - allowing us to further validate the options which are passed in to our schematic. We want to create the `schema.d.ts` file within our `cookbook-component` schematic directory. We can easily create our `schema.d.ts` declaration file schema interface by looking at our schematic's `schema.json` file. Here is what our `schema.d.ts` file should look like:

```javascript
import { Schema as ComponentOptions} from '@schematics/angular/component/schema';

export interface Schema extends ComponentOptions {
    name: string,
    service?: boolean
}
```
In the above code we have simply created a `Schema` interface which is modeled after our `cookbook-component` schematic's `schema.json` which says that this schematic will expect a required `name` argument along with an optional `service` argument. We have also created this `Schema` interface to extend Angular's actual `component` schematic which is used by the Angular CLI in order to scaffold a new Angular component. Now all of the schematic options which are available to the `component` schematic will also be available to the `cookbook-component` schematic.

Now that we have successfully modeled our `cookbook-component` schematic's available options, let's write some tests!

### Step Two - Writing Unit Tests

In this section we will practice a little TDD (Test-Driven Development) by writing our schematic's unit tests before its RuleFactory logic.

Now we are ready to write our first unit test. Let's just dive into the code and explain afterwards!

```javascript
import { SchematicTestRunner, UnitTestTree } from '@angular-devkit/schematics/testing';
import { Schema as AngularWorkspaceOptions} from '@schematics/angular/workspace/schema';
import { Schema as AngularApplicationOptions} from '@schematics/angular/application/schema';
import { Schema as CookbookComponentOptions } from './schema';
import * as path from 'path';

const collectionPath = path.join(__dirname, '../collection.json');
const angularSchematicsCollectionPath = require.resolve('@schematics/angular/collection.json');

describe('cookbook-component schematic', () => {
  const angularRunner = new SchematicTestRunner('@schematics/angular', angularSchematicsCollectionPath);
  const cookbookRunner = new SchematicTestRunner('cookbook', collectionPath);
  const workspaceOptions: AngularWorkspaceOptions = {
    name: 'test-app-name',
    newProjectRoot: 'test-app-root',
    version: '7.0.3',
  };

  const appOptions: AngularApplicationOptions = {
    name: 'test-app-name'
  };

  let angularApplicationTree: UnitTestTree;
  beforeEach(() => {
    angularApplicationTree = angularRunner.runSchematic('workspace', workspaceOptions);
    angularApplicationTree = angularRunner.runSchematic('application', appOptions, angularApplicationTree);
  });

  it('creates a <comp-name>.service.ts file when the service option is given', () => {
    const options: CookbookComponentOptions = {
      name: 'test-component',
      service: true
    };

    const tree = cookbookRunner.runSchematic('cookbook-component', options, angularApplicationTree);

    expect(tree.files.indexOf(
      `/test-app-root/${appOptions.name}/src/app/${options.name}/${options.name}.service.ts`
    )).toBeGreaterThan(-1);
  });

  it('doesn\'t create a <comp-name>.service.ts file when the service option is not given', () => {
    const options: CookbookComponentOptions = { name: 'test-component' , project: 'test-app-name'};

    const tree = cookbookRunner.runSchematic('cookbook-component', options, angularApplicationTree);

    expect(options.service).toBeFalsy();
    expect(tree.files.indexOf(
      `/test-app-root/${options.project}/src/app/${options.name}/${options.name}.service.ts`
    )).toBe(-1);
  });
});
```

In the above test file we have created two unit units. Before each unit test, we make sure to run Angular's `workspace` and `application` schematics. Running these schematics helps us to fake the pre-existing `Tree` that will be available to our `cookbook-component` schematic when it is used within an Angular application. `The first unit test runs the `cookbook-component` schematic using the provided `SchematicTestRunner` class and then asserts that a service file is created in the `Tree` when the `service` flag is set to `true`. The second unit test simply tests the opposite condition. 

*Note:* By running `npm run test` inside of the project root you can see the status of these tests!


### Step Three - Implementing our Schematic's RuleFactory

Now it's time to code the logic of the `cookbook-component` schematic's `RuleFactory`. Let's jump in!

```javascript
import { strings } from '@angular-devkit/core';
import { 
  Rule, 
  SchematicsException,
  Tree, 
  externalSchematic,
  branchAndMerge,
  mergeWith,
  chain,
  apply,
  url,
  template,
  move,
  noop,
  empty
} from '@angular-devkit/schematics';
import { parseName } from '@schematics/angular/utility/parse-name';
import { getWorkspace } from '@schematics/angular/utility/config';
import { buildDefaultPath, getProject } from '@schematics/angular/utility/project';

import { Schema as CookbookComponentOptions } from './schema';

/*
  This schematic builds upon Angular CLI's `ng g component` command by adding in the ability to generate
  an optional, side-car service file alongside the generated component file.
*/
export function cookbookComponent(options: CookbookComponentOptions): Rule {
  return (tree: Tree) => {
    const needsToGenerateService = options.service ? true : false;
    let serviceTemplateSource = empty();

    if (needsToGenerateService) {
      const workspace = getWorkspace(tree);
      const projectName = options.project || workspace.defaultProject;
      if (!options.project) options.project = projectName;

      if (!projectName) {
        throw new SchematicsException('The option \'project\' is required');
      }
      
      const project = getProject(tree, projectName);

      if (options.path === undefined || options.path === null) {
        options.path = buildDefaultPath(project);
      }

      const serviceLocation = parseName(options.path, options.name);
      const servicePath = serviceLocation.path + `/${options.name}`;
      serviceTemplateSource = apply(url('./files'), [
        template({
          ...strings,
          'if-flat': (s: string) => options.flat ? '' : s,
          ...options,
        }),
        move(servicePath),
      ]);
    }

    return branchAndMerge(
      chain([
        externalSchematic('@schematics/angular', 'component', options),
        needsToGenerateService ? mergeWith(serviceTemplateSource) : noop()
      ])
    );
  };
}

```

Let's break this down. At a high level, the `cookbook-component` `RuleFactory` above is returning a `Rule` that calls Angular's `component` schematic and merging the resulting `Tree` with an optional, service template `Source`.

We first determine whether or not this schematic needs to generate a service for the soon-to-be-generated component. If a service is not needed, we simply run Angular's `component` schematic and return the resulting `Rule`. However, if a service needs to be generated, the `RuleFactory` fetches the current Angular `WorkspaceSchema` by using the provided utility function `getWorkspace`. This schema is then used to collect the default, project name of the current Angular workspace. In turn, this project name is to be used to collect the current `WorkspaceProject` in the event that a `project` option is not passed into the schematic. We then pass this `WorkspaceProject` into the `buildDefaultPath` utility function in the event that a `path` option is not passed into the `cookbook-component` schematic. The `buildDefaultPath` utility function is used to fetch the correct, default path for a given Angular project. After this, we use the `parseName` utility function in order to generate the correct, normalized `Path` that will house our new service file. Once we have this path, we generate a template `Source` which contains our templated, service file. Finally, we end our schematic by constructing a new `Rule` and `Tree` which is merged with the `Tree` that is initially passed into our schematic using the `branchAndMerge` function. We create this new `Rule` and `Tree` by using the `chain` function. First, we call Angular's `component` schematic through the `externalSchematic` function. The resulting `Rule` generated by `externalSchematic` is then chained with a `Rule` generated by either the `mergeWith` or `noop` function. If a service needs to be generated, we use the `mergeWith` function to merge our service template `Source` with the previous `Rule`. If no service is needed, we generate an empty `Rule` using the `noop` function.

Let's run our unit tests again! First change directory into the root directory of our schematics collection then run:

`npm test`

You should see both tests passing!


### Step Four - Testing Our Schematic in an Angular Application

Now that we have a unit-tested schematic - let's test it from within a real Angular app.

First, change your current working directory to the root directory of our `cookbook` schematic collection. Then we need to compile our project. Lets do this by running `npm run build`.

From there we are going to run the command `npm link`. This command will create a symlink between our `cookbook` schematic collection NPM package and our global, `node_modules` folder.

From there, we want to generate a new Angular app by running the following commands from a directory of our choosing (preferably not the `cookbook` schematic collection root directory!):

`ng new cookbook-test-app`
`cd cookbook-test-app`

Now we are in our new, Angular test app. Now let's make our `cookbook` schematic collection available to our Angular app. From inside this directory let's run `npm link cookbook`;

Finally! Let's test our new `cookbook-component` by running the following commands:

`cd src/app`;
`ng g cookbook:cookbook-component --name test --service`

Voila!

You should now see a new `test` directory. If you `cd` into this directory you should now see your new test component along with a side-car, `test.service.ts` file!

## Conclusion

Wow, that was a lot! We've created our first Angular schematic! But we're just getting started. In further recipes we'll dive even deeper into this exciting developer workflow tool!