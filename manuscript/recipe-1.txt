# Recipe 1 - Altering `ng generate component`

In this recipe, we will create a schematic that customizes Angular CLI's `ng generate component` command. Under the hood, Angular CLI's `ng generate component` command uses a Angular schematic named `component`. To view this schematic's source code, visit [here](https://github.com/angular/angular-cli/tree/master/packages/schematics/angular/component).

To complete this recipe, you will need to have the Angular CLI installed on your host machine. To install Angular CLI globally on your machine, run the following command:

`npm install -g @angular/cli`

---

## Preparation

### Our Test Angular Application

First, we will create a new Angular project that will use the schematic we will soon create.

In order to create a new Angular application, we need to run the following command:

`ng new test-app`

You now have a new, baseline Angular application available in the `test-app` directory.

### Our Schematic Collection

Next, we are going to create the schematic collection that will house each one of our recipes. We will call it the `cookbook`.

In the same directory that houses our '`test-app`' Angular application, run the following command:

`schematics blank --name=cookbook`

That command scaffolded the Angular schematic collection which we will use to house all of our 'recipe' schematics.

### Creating Our First Recipe

First things first, we need to change the name of the `cookbook` schematic which was auto-generated inside of our `cookbook` schematic collection when we first created it. 

First off, we need to change this default schematic's metadata located inside of `cookbook/src/collection.json`.

We are going to change this schematic's name from `cookbook` to `cookbook-component`. Here is an example of what our `collection.json` will look like after these alterations:

```json
{
    "$schema": "../node_modules/@angular-devkit/schematics/collection-schema.json",
    "schematics": {
        "cookbook-component": {
        "description": "Generates a cookbook Angular component",
        "factory": "./cookbook-component/index#cookbookComponent"
        }
    }
}
```

After this, we need to make some changes to our schematic's RuleFactory located in `cookbook/src/cookbook/index.ts`. All that we will need to change is the name of our RuleFactory. Here is an example of what our schematic's RuleFactory will look like after these changes:

```javascript
import { Rule, SchematicContext, Tree } from '@angular-devkit/schematics';


// You don't have to export the function as default. You can also have more than one rule factory
// per file.
export function cookbookComponent(_options: any): Rule {
    return (tree: Tree, _context: SchematicContext) => {
        return tree;
    };
}
```

Next, we need to change our `cookbook-component` schematic's test file located at `cookbook/src/cookbook/index_spec.ts`. Here is what we want it to look like:

```javascript
import { Tree } from '@angular-devkit/schematics';
import { SchematicTestRunner } from '@angular-devkit/schematics/testing';
import * as path from 'path';


const collectionPath = path.join(__dirname, '../collection.json');


describe('cookbook-component schematic', () => {
  it('works', () => {
    const runner = new SchematicTestRunner('schematics', collectionPath);
    const tree = runner.runSchematic('cookbook-component', {}, Tree.empty());

    expect(tree.files).toEqual([]);
  });
});
```

Next we need to prepare our template directory structure. We will do this by creating a directory named `files` in our schematic's directory. We need to create this directory at the following path: `cookbook/src/cookbook/files`.
This directory will house the templates for files that our schematic will create when invoked.

Lastly, we need to create our schematic's schema file. We will create the file located at this path: `cookbook/src/cookbook/schema.json`.


## Cookbook-Component Implementation

With our preparation taken care of, it's time to implement the core logic of our schematic.

-- do logic of index_spec.ts
-- do logic of index.ts
-- fill out schema.json
-- fill out files in files dir
-- give our schematic an alias, other metadata in collection.json
-- (test everything on host system and run through everything)
