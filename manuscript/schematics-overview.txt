# Schematic Overview

As we journey deeper into the world of Angular Schematics, it's now time to discover the power of individual schematics themselves. Let's start by viewing the structure of a schematic.

```s
/schematic-one
  /files
  index.ts
  index_spec.ts
  schema.ts
  schema.json
```

## Schematic Metadata and Validation - `schema.ts` and `schema.json`
The purpose of the `schema.json` and `schema.ts` files is to provide a schema for the schematic. These files are used by the Schematics Library and by the local `RuleFactory` found within the `index.ts`.

Check out this commented example `schema.json` for a fake schematic - `schematic-one`:

```json
{
  // JSON schema location (optional)
  "$schema": "http://json-schema.org/schema",

  // ID which points to a schematic.
  "id": "SchematicOne",

  // Schematic title.
  "title": "Schematic One Options Schema",

  /*
   Type of the options which will get passed into our schematic.
   */
  "type": "object",

  /*
    An object which defines both command-line arguments and other
    options which may get passed in by another schematic.
  */
  "properties": {

    // Example option
    "path": {
      "type": "string",
      "format": "path",
      "description": "The path to run schematic one."
    },

    /*
        This is an example of an option which is passed in by another schematic.
    */
    "workspace": {
      "type": "string",
      "description": "A workspace name.",
      "$default": {
        "$source": "workspaceName"
      }
    },

    // Example of a command-line-based option
    "name": {
      "type": "string",
      "description": "The name of our output directory.",
      "$default": {
        "$source": "argv",
        "index": 0
      }
    }
}
```

Now let's view our `schema.ts` file. This file will be used directly by our schematic's `RuleFactory` to validate it's options.

```javascript
export interface Schema {
  name: string;
  workspace?: string;
  path?: string;
}
```

## The RuleFactory

Now that we have gone over our schema and described what our schematic's inputs will be, it is time to describe its output. The `index.ts` does just that.

```javascript
import {
    apply,
    mergeWith,
    chain,
    move,
    Rule,
    template,
    url,
    Tree,
    SchematicContext
} from '@angular-devkit/schematics';
import { strings } from '@angular-devkit/core';
import { SchematicOneOptions } from './schema';

export default function schematicOne(options: SchematicOneOptions): Rule {

    return (host: Tree, context: SchematicContext) => {
      const templateSource = apply(url('./files'), [
        template({
          ...strings,
          ...options
        }),
        move(options.path ? options.path : `/{options.name}`)
      ]);

      const rule = chain([
          mergeWith(templateSource),
      ]);

      return rule(host, context);
    }
}
```

The `index.ts` exports the `RuleFactory` for its schematic. The purpose of this `RuleFactory` is to output a `Rule` (more on the `Rule` later) which basically conveys what changes this schematic means to introduce to the file system. For now, just think of a `Rule` as a function that takes in a `Tree` and `SchematicContext` and returns another `Tree` containing changes. Changes that this factory can introduce include but are not limited to: altering existing files, creating new files based upon templates, and running `Tasks` (more on the `Task` later).

The `index_spec.ts` file is simply the test file for our schematic. In this file we define unit tests which we can run against our schematic in isolation in order to make sure that it's working properly. You can see examples of `index_spec.ts` files when we start building our own schematics later in the book.

## Schematic Templating

Lastly, let's learn a bit about the ability of a schematic to use templates. The optional `/files` directory houses template files/directories which the schematic can use to generate custom code/files. Much of the power of Schematics is showcased via it's templating and code generation capabilities. There is much to discuss here - all of which we cover in detail within the *"Templating"* section later in this book.
