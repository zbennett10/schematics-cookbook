# The Rule

Rules are simply functions that operate on Trees and return a new Tree with modifications.

Rules have two inputs and 1 output. The inputs are a Tree and a SchematicContext. The output is a Tree.

Rules are the base of schematics and are where schematic authors will write the majority of their schematic's logic.

The Schematics library provides numerous Rule factories. These following factories are the main functions which will be used by developers who wish to create or customize a schematic.

## Rule Factories
---

`noop(): Rule`

Returns a rule that does nothing on the tree that is passed in to it

---

`chain(rules: Rule[]): Rule`

This is an oft used Rule factor which returns a rule that chains the rules passed in.

---

`mergeWith(source: Source, strategy?: MergeStrategy): Rule`

This function, at its core, merges two trees with an optional MergeStrategy. The first tree in the merge is taken from calling the Source function that is passed in to the 'mergeWith' Rule factory. The second tree is passed in to the resulting Rule.
    
---

`branchAndMerge(rule: Rule, strategy?: MergeStrategy): Rule`

This function branches the current tree (creating a virtual copy that is performant) and merges it with the given Rule whilst using an optional MergeStrategy.

---

`filter(predicate: FilePredicate<boolean>): Rule`

The passed in FilePredicate is a function that takes in a path as a string and returns a boolean. This function is useful for filtering files from a Tree. An example FilePredicate could look like the following:

```
(path: string) => !path.endsWith('.spec.ts')

```

The above FilePredicate filters out test files from a Tree's directory structure.

---

`forEach(operator: FileOperator): Rule`

This function returns a Rule after applying the given FileOperator to every file in the Tree.
Example: https://stackoverflow.com/questions/48957132/how-to-overwrite-file-with-angular-schematicss

---

`move(input: string): Rule`

This function simply moves every file from the current tree into the input path.

---
